{
  "service": {
    "service": "serverless-flask",
    "serviceObject": {
      "name": "serverless-flask"
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.7",
      "stage": "prod",
      "endpointType": "REGIONAL",
      "region": "ap-northeast-1",
      "lambdaHashingVersion": "20201221",
      "apiGateway": {
        "apiKeys": [
          {
            "name": "marugoto-momoclo-api-key-prod",
            "value": "dxZgNirsUH288XujmlO1G14PT39FUtec8FrNGDhL",
            "description": "まるごとももクロの開発用のAPIキー"
          }
        ]
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "sns:*"
              ],
              "Resource": [
                "arn:aws:dynamodb:ap-northeast-1:*:table/Images",
                "arn:aws:dynamodb:ap-northeast-1:*:table/*",
                "arn:aws:sns:ap-northeast-1:880515148799:marugoto-momoclo-for-owner",
                "arn:aws:sns:ap-northeast-1:880515148799:app/APNS_SANDBOX/marugoto-momoclo",
                "arn:aws:sns:ap-northeast-1:880515148799:app/APNS/marugotoda-Z-prod",
                "arn:aws:sns:ap-northeast-1:880515148799:marugoto-momoclo-for-all",
                "arn:aws:sns:ap-northeast-1:880515148799:marugoto-momoclo-momotakanako",
                "arn:aws:sns:ap-northeast-1:880515148799:marugoto-momoclo-sasakiayaka",
                "arn:aws:sns:ap-northeast-1:880515148799:marugoto-momoclo-takagireni",
                "arn:aws:sns:ap-northeast-1:880515148799:marugoto-momoclo-tamaishiori",
                "arn:aws:dynamodb:ap-northeast-1:880515148799:table/Images/index/group-date-index",
                "arn:aws:dynamodb:ap-northeast-1:880515148799:table/Photos/index/group-date-index"
              ]
            }
          ]
        }
      },
      "environment": {
        "PLATFORM_APPLICATION_ARN": "arn:aws:sns:ap-northeast-1:880515148799:app/APNS/marugotoda-Z-prod",
        "NOTIFICATIONS_TABLE_NAME": "Notifications"
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "DownloadImagesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-flask-prod-downloadImages"
            }
          },
          "DownloadImageUrlsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-flask-prod-downloadImageUrls"
            }
          },
          "DownloadImageUrlLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-flask-prod-downloadImageUrl"
            }
          },
          "GetNotificationSettingsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-flask-prod-getNotificationSettings"
            }
          },
          "PostLineEventsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-flask-prod-postLineEvents"
            }
          },
          "RegisterPostsAndStoriesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-flask-prod-registerPostsAndStories"
            }
          },
          "RegisterYoutubeVideosLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-flask-prod-registerYoutubeVideos"
            }
          },
          "NotifyDailyScheduleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-flask-prod-notifyDailySchedule"
            }
          },
          "RegisterTweetsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-flask-prod-registerTweets"
            }
          },
          "NotifyNewPhotosLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-flask-prod-notifyNewPhotos"
            }
          },
          "ExecuteForLoadingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-flask-prod-executeForLoading"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "serverless-flask",
                        "prod",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-flask-prod*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-flask-prod*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "serverless-flask",
                    "prod",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "DownloadImagesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-flask/prod/1661046349626-2022-08-21T01:45:49.626Z/serverless-flask.zip"
              },
              "Handler": "wsgi_handler.handler",
              "Runtime": "python3.7",
              "FunctionName": "serverless-flask-prod-downloadImages",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PLATFORM_APPLICATION_ARN": "arn:aws:sns:ap-northeast-1:880515148799:app/APNS/marugotoda-Z-prod",
                  "NOTIFICATIONS_TABLE_NAME": "Notifications",
                  "Other_File": "Production environment"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DownloadImagesLogGroup"
            ]
          },
          "DownloadImageUrlsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-flask/prod/1661046349626-2022-08-21T01:45:49.626Z/serverless-flask.zip"
              },
              "Handler": "wsgi_handler.handler",
              "Runtime": "python3.7",
              "FunctionName": "serverless-flask-prod-downloadImageUrls",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PLATFORM_APPLICATION_ARN": "arn:aws:sns:ap-northeast-1:880515148799:app/APNS/marugotoda-Z-prod",
                  "NOTIFICATIONS_TABLE_NAME": "Notifications",
                  "Other_File": "Production environment"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DownloadImageUrlsLogGroup"
            ]
          },
          "DownloadImageUrlLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-flask/prod/1661046349626-2022-08-21T01:45:49.626Z/serverless-flask.zip"
              },
              "Handler": "wsgi_handler.handler",
              "Runtime": "python3.7",
              "FunctionName": "serverless-flask-prod-downloadImageUrl",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PLATFORM_APPLICATION_ARN": "arn:aws:sns:ap-northeast-1:880515148799:app/APNS/marugotoda-Z-prod",
                  "NOTIFICATIONS_TABLE_NAME": "Notifications",
                  "Other_File": "Production environment"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DownloadImageUrlLogGroup"
            ]
          },
          "GetNotificationSettingsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-flask/prod/1661046349626-2022-08-21T01:45:49.626Z/serverless-flask.zip"
              },
              "Handler": "wsgi_handler.handler",
              "Runtime": "python3.7",
              "FunctionName": "serverless-flask-prod-getNotificationSettings",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PLATFORM_APPLICATION_ARN": "arn:aws:sns:ap-northeast-1:880515148799:app/APNS/marugotoda-Z-prod",
                  "NOTIFICATIONS_TABLE_NAME": "Notifications"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetNotificationSettingsLogGroup"
            ]
          },
          "PostLineEventsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-flask/prod/1661046349626-2022-08-21T01:45:49.626Z/serverless-flask.zip"
              },
              "Handler": "wsgi_handler.handler",
              "Runtime": "python3.7",
              "FunctionName": "serverless-flask-prod-postLineEvents",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PLATFORM_APPLICATION_ARN": "arn:aws:sns:ap-northeast-1:880515148799:app/APNS/marugotoda-Z-prod",
                  "NOTIFICATIONS_TABLE_NAME": "Notifications",
                  "Other_File": "Production environment"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PostLineEventsLogGroup"
            ]
          },
          "RegisterPostsAndStoriesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-flask/prod/1661046349626-2022-08-21T01:45:49.626Z/serverless-flask.zip"
              },
              "Handler": "batch/register_posts_and_stories.register_posts_and_stories",
              "Runtime": "python3.7",
              "FunctionName": "serverless-flask-prod-registerPostsAndStories",
              "MemorySize": 1024,
              "Timeout": 120,
              "Environment": {
                "Variables": {
                  "PLATFORM_APPLICATION_ARN": "arn:aws:sns:ap-northeast-1:880515148799:app/APNS/marugotoda-Z-prod",
                  "NOTIFICATIONS_TABLE_NAME": "Notifications"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegisterPostsAndStoriesLogGroup"
            ]
          },
          "RegisterYoutubeVideosLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-flask/prod/1661046349626-2022-08-21T01:45:49.626Z/serverless-flask.zip"
              },
              "Handler": "batch/register_youtube_videos.register_youtube_videos",
              "Runtime": "python3.7",
              "FunctionName": "serverless-flask-prod-registerYoutubeVideos",
              "MemorySize": 1024,
              "Timeout": 120,
              "Environment": {
                "Variables": {
                  "PLATFORM_APPLICATION_ARN": "arn:aws:sns:ap-northeast-1:880515148799:app/APNS/marugotoda-Z-prod",
                  "NOTIFICATIONS_TABLE_NAME": "Notifications"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegisterYoutubeVideosLogGroup"
            ]
          },
          "NotifyDailyScheduleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-flask/prod/1661046349626-2022-08-21T01:45:49.626Z/serverless-flask.zip"
              },
              "Handler": "batch/notify_daily_schedule.notify_daily_schedule",
              "Runtime": "python3.7",
              "FunctionName": "serverless-flask-prod-notifyDailySchedule",
              "MemorySize": 1024,
              "Timeout": 600,
              "Environment": {
                "Variables": {
                  "PLATFORM_APPLICATION_ARN": "arn:aws:sns:ap-northeast-1:880515148799:app/APNS/marugotoda-Z-prod",
                  "NOTIFICATIONS_TABLE_NAME": "Notifications"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "NotifyDailyScheduleLogGroup"
            ]
          },
          "RegisterTweetsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-flask/prod/1661046349626-2022-08-21T01:45:49.626Z/serverless-flask.zip"
              },
              "Handler": "batch/register_tweets.register_tweets",
              "Runtime": "python3.7",
              "FunctionName": "serverless-flask-prod-registerTweets",
              "MemorySize": 1024,
              "Timeout": 600,
              "Environment": {
                "Variables": {
                  "PLATFORM_APPLICATION_ARN": "arn:aws:sns:ap-northeast-1:880515148799:app/APNS/marugotoda-Z-prod",
                  "NOTIFICATIONS_TABLE_NAME": "Notifications"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegisterTweetsLogGroup"
            ]
          },
          "NotifyNewPhotosLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-flask/prod/1661046349626-2022-08-21T01:45:49.626Z/serverless-flask.zip"
              },
              "Handler": "batch/notify_new_photos.notify_new_photos",
              "Runtime": "python3.7",
              "FunctionName": "serverless-flask-prod-notifyNewPhotos",
              "MemorySize": 1024,
              "Timeout": 600,
              "Environment": {
                "Variables": {
                  "PLATFORM_APPLICATION_ARN": "arn:aws:sns:ap-northeast-1:880515148799:app/APNS/marugotoda-Z-prod",
                  "NOTIFICATIONS_TABLE_NAME": "Notifications"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "NotifyNewPhotosLogGroup"
            ]
          },
          "ExecuteForLoadingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-flask/prod/1661046349626-2022-08-21T01:45:49.626Z/executeForLoading.zip"
              },
              "Handler": "batch/execute_for_loading.execute_for_loading",
              "Runtime": "python3.7",
              "FunctionName": "serverless-flask-prod-executeForLoading",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "PLATFORM_APPLICATION_ARN": "arn:aws:sns:ap-northeast-1:880515148799:app/APNS/marugotoda-Z-prod",
                  "NOTIFICATIONS_TABLE_NAME": "Notifications"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ExecuteForLoadingLogGroup"
            ]
          },
          "ExecuteForLoadingLambdaVersion0bH8aHEaCcHw1jWFucP3xDKKuEWdR4tYRmSCi0PQFHo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ExecuteForLoadingLambdaFunction"
              },
              "CodeSha256": "VQPUsMIVIBM+MgkSqxCVNlbIHgGd1RUQkcOeWyridvk="
            }
          },
          "DownloadImagesLambdaVersionV2s1TUyBcg2f3YNF2xw9zeyCpIOpzyAPdQuAbOhZRk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DownloadImagesLambdaFunction"
              },
              "CodeSha256": "OFxhcclULQKWnEWHBW7mO5lLQGqMOfvM3yJsbNkfxsE="
            }
          },
          "DownloadImageUrlsLambdaVersionZXlzUN38DiDlEkiAHzr86RuZdVWkdP0PIXQroVoc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DownloadImageUrlsLambdaFunction"
              },
              "CodeSha256": "OFxhcclULQKWnEWHBW7mO5lLQGqMOfvM3yJsbNkfxsE="
            }
          },
          "DownloadImageUrlLambdaVersionNHF7rXVvNUpZjoTwijiQKKqAsKK82xFWZjbhV73xs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DownloadImageUrlLambdaFunction"
              },
              "CodeSha256": "OFxhcclULQKWnEWHBW7mO5lLQGqMOfvM3yJsbNkfxsE="
            }
          },
          "GetNotificationSettingsLambdaVersionz99xjMUpJbyFA2fYd5ca5xOtz5rSe3nYCLrE6nk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetNotificationSettingsLambdaFunction"
              },
              "CodeSha256": "OFxhcclULQKWnEWHBW7mO5lLQGqMOfvM3yJsbNkfxsE="
            }
          },
          "PostLineEventsLambdaVersionpJFccgXhHvd0NYSEqzXtKGPEZt0WBLwr61GiWPPcYVs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PostLineEventsLambdaFunction"
              },
              "CodeSha256": "OFxhcclULQKWnEWHBW7mO5lLQGqMOfvM3yJsbNkfxsE="
            }
          },
          "RegisterPostsAndStoriesLambdaVersionFLeb7wCobSiu9o2M07AIIAhO2UdZWLbvHgcFhSxKj4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterPostsAndStoriesLambdaFunction"
              },
              "CodeSha256": "OFxhcclULQKWnEWHBW7mO5lLQGqMOfvM3yJsbNkfxsE="
            }
          },
          "RegisterYoutubeVideosLambdaVersionk53wnAXiPbyhKUSTtgZjRFxl6Ey5XVRO04zUdjQymk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterYoutubeVideosLambdaFunction"
              },
              "CodeSha256": "OFxhcclULQKWnEWHBW7mO5lLQGqMOfvM3yJsbNkfxsE="
            }
          },
          "NotifyDailyScheduleLambdaVersionmTulsxou8wdlKanhRF2lBivPAKwTTTQ5xp2ZHeAQw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "NotifyDailyScheduleLambdaFunction"
              },
              "CodeSha256": "OFxhcclULQKWnEWHBW7mO5lLQGqMOfvM3yJsbNkfxsE="
            }
          },
          "RegisterTweetsLambdaVersionXLePPjtBOm2LEyGEEfTOfVuGOVnLJEBM7Hczk0BBEPs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterTweetsLambdaFunction"
              },
              "CodeSha256": "OFxhcclULQKWnEWHBW7mO5lLQGqMOfvM3yJsbNkfxsE="
            }
          },
          "NotifyNewPhotosLambdaVersion2dkxtQZeMF0Xm8EspxPZh2aIQ3os56M6xkENUcJcQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "NotifyNewPhotosLambdaFunction"
              },
              "CodeSha256": "OFxhcclULQKWnEWHBW7mO5lLQGqMOfvM3yJsbNkfxsE="
            }
          },
          "DownloadImagesEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(5 minutes)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "DownloadImagesLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "downloadImagesSchedule"
                }
              ]
            }
          },
          "DownloadImagesLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DownloadImagesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "DownloadImagesEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "DownloadImageUrlsEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(5 minutes)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "DownloadImageUrlsLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "downloadImageUrlsSchedule"
                }
              ]
            }
          },
          "DownloadImageUrlsLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DownloadImageUrlsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "DownloadImageUrlsEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "RegisterPostsAndStoriesEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(55 2,8,14 ? * * *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "RegisterPostsAndStoriesLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "registerPostsAndStoriesSchedule"
                }
              ]
            }
          },
          "RegisterPostsAndStoriesLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterPostsAndStoriesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "RegisterPostsAndStoriesEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "RegisterYoutubeVideosEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(1 hour)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "RegisterYoutubeVideosLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "registerYoutubeVideosSchedule"
                }
              ]
            }
          },
          "RegisterYoutubeVideosLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterYoutubeVideosLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "RegisterYoutubeVideosEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "NotifyDailyScheduleEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(0 22 ? * * *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "NotifyDailyScheduleLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "notifyDailyScheduleSchedule"
                }
              ]
            }
          },
          "NotifyDailyScheduleLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "NotifyDailyScheduleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "NotifyDailyScheduleEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "RegisterTweetsEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(20/30 23-15 ? * * *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "RegisterTweetsLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "registerTweetsSchedule"
                }
              ]
            }
          },
          "RegisterTweetsLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterTweetsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "RegisterTweetsEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "NotifyNewPhotosEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(0 3,9,15 ? * * *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "NotifyNewPhotosLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "notifyNewPhotosSchedule"
                }
              ]
            }
          },
          "NotifyNewPhotosLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "NotifyNewPhotosLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "NotifyNewPhotosEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "ExecuteForLoadingEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(5 minutes)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "ExecuteForLoadingLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "executeForLoadingSchedule"
                }
              ]
            }
          },
          "ExecuteForLoadingLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ExecuteForLoadingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "ExecuteForLoadingEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "prod-serverless-flask",
              "EndpointConfiguration": {
                "Types": [
                  "REGIONAL"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourcePhotos": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "photos",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePhotosurl": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "photosUrl",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePhotosurlIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePhotosurl"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceNotifications": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "notifications",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceLine": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "line",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceLineEvents": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceLine"
              },
              "PathPart": "events",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPhotosOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePhotos"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPhotosurlOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePhotosurl"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPhotosurlIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePhotosurlIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodNotificationsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceNotifications"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodLineEventsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceLineEvents"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPhotosGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePhotos"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DownloadImagesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DownloadImagesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodPhotosurlGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePhotosurl"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DownloadImageUrlsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DownloadImageUrlsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodPhotosurlIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePhotosurlIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DownloadImageUrlLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DownloadImageUrlLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodNotificationsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceNotifications"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetNotificationSettingsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetNotificationSettingsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodLineEventsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLineEvents"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PostLineEventsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "PostLineEventsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1661046317609": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "prod"
            },
            "DependsOn": [
              "ApiGatewayMethodPhotosOptions",
              "ApiGatewayMethodPhotosurlOptions",
              "ApiGatewayMethodPhotosurlIdVarOptions",
              "ApiGatewayMethodNotificationsOptions",
              "ApiGatewayMethodLineEventsOptions",
              "ApiGatewayMethodPhotosGet",
              "ApiGatewayMethodPhotosurlGet",
              "ApiGatewayMethodPhotosurlIdVarGet",
              "ApiGatewayMethodNotificationsGet",
              "ApiGatewayMethodLineEventsPost"
            ]
          },
          "ApiGatewayApiKey1": {
            "Type": "AWS::ApiGateway::ApiKey",
            "Properties": {
              "Enabled": true,
              "Name": "marugoto-momoclo-api-key-prod",
              "Value": "dxZgNirsUH288XujmlO1G14PT39FUtec8FrNGDhL",
              "Description": "まるごとももクロの開発用のAPIキー",
              "StageKeys": [
                {
                  "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "StageName": "prod"
                }
              ]
            },
            "DependsOn": "ApiGatewayDeployment1661046317609"
          },
          "ApiGatewayUsagePlan": {
            "Type": "AWS::ApiGateway::UsagePlan",
            "DependsOn": "ApiGatewayDeployment1661046317609",
            "Properties": {
              "ApiStages": [
                {
                  "ApiId": {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "Stage": "prod"
                }
              ],
              "Description": "Usage plan for serverless-flask prod stage",
              "UsagePlanName": "serverless-flask-prod"
            }
          },
          "ApiGatewayUsagePlanKey1": {
            "Type": "AWS::ApiGateway::UsagePlanKey",
            "Properties": {
              "KeyId": {
                "Ref": "ApiGatewayApiKey1"
              },
              "KeyType": "API_KEY",
              "UsagePlanId": {
                "Ref": "ApiGatewayUsagePlan"
              }
            }
          },
          "DownloadImagesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DownloadImagesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DownloadImageUrlsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DownloadImageUrlsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DownloadImageUrlLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DownloadImageUrlLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetNotificationSettingsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetNotificationSettingsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PostLineEventsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PostLineEventsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GatewayResponseDefault4XX": {
            "Type": "AWS::ApiGateway::GatewayResponse",
            "Properties": {
              "ResponseParameters": {
                "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
              },
              "ResponseType": "DEFAULT_4XX",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-serverless-flask-prod-ServerlessDeploymentBucketName"
            }
          },
          "ExecuteForLoadingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ExecuteForLoadingLambdaVersion0bH8aHEaCcHw1jWFucP3xDKKuEWdR4tYRmSCi0PQFHo"
            },
            "Export": {
              "Name": "sls-serverless-flask-prod-ExecuteForLoadingLambdaFunctionQualifiedArn"
            }
          },
          "DownloadImagesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DownloadImagesLambdaVersionV2s1TUyBcg2f3YNF2xw9zeyCpIOpzyAPdQuAbOhZRk"
            },
            "Export": {
              "Name": "sls-serverless-flask-prod-DownloadImagesLambdaFunctionQualifiedArn"
            }
          },
          "DownloadImageUrlsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DownloadImageUrlsLambdaVersionZXlzUN38DiDlEkiAHzr86RuZdVWkdP0PIXQroVoc"
            },
            "Export": {
              "Name": "sls-serverless-flask-prod-DownloadImageUrlsLambdaFunctionQualifiedArn"
            }
          },
          "DownloadImageUrlLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DownloadImageUrlLambdaVersionNHF7rXVvNUpZjoTwijiQKKqAsKK82xFWZjbhV73xs"
            },
            "Export": {
              "Name": "sls-serverless-flask-prod-DownloadImageUrlLambdaFunctionQualifiedArn"
            }
          },
          "GetNotificationSettingsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetNotificationSettingsLambdaVersionz99xjMUpJbyFA2fYd5ca5xOtz5rSe3nYCLrE6nk"
            },
            "Export": {
              "Name": "sls-serverless-flask-prod-GetNotificationSettingsLambdaFunctionQualifiedArn"
            }
          },
          "PostLineEventsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PostLineEventsLambdaVersionpJFccgXhHvd0NYSEqzXtKGPEZt0WBLwr61GiWPPcYVs"
            },
            "Export": {
              "Name": "sls-serverless-flask-prod-PostLineEventsLambdaFunctionQualifiedArn"
            }
          },
          "RegisterPostsAndStoriesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegisterPostsAndStoriesLambdaVersionFLeb7wCobSiu9o2M07AIIAhO2UdZWLbvHgcFhSxKj4"
            },
            "Export": {
              "Name": "sls-serverless-flask-prod-RegisterPostsAndStoriesLambdaFunctionQualifiedArn"
            }
          },
          "RegisterYoutubeVideosLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegisterYoutubeVideosLambdaVersionk53wnAXiPbyhKUSTtgZjRFxl6Ey5XVRO04zUdjQymk"
            },
            "Export": {
              "Name": "sls-serverless-flask-prod-RegisterYoutubeVideosLambdaFunctionQualifiedArn"
            }
          },
          "NotifyDailyScheduleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "NotifyDailyScheduleLambdaVersionmTulsxou8wdlKanhRF2lBivPAKwTTTQ5xp2ZHeAQw"
            },
            "Export": {
              "Name": "sls-serverless-flask-prod-NotifyDailyScheduleLambdaFunctionQualifiedArn"
            }
          },
          "RegisterTweetsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegisterTweetsLambdaVersionXLePPjtBOm2LEyGEEfTOfVuGOVnLJEBM7Hczk0BBEPs"
            },
            "Export": {
              "Name": "sls-serverless-flask-prod-RegisterTweetsLambdaFunctionQualifiedArn"
            }
          },
          "NotifyNewPhotosLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "NotifyNewPhotosLambdaVersion2dkxtQZeMF0Xm8EspxPZh2aIQ3os56M6xkENUcJcQ"
            },
            "Export": {
              "Name": "sls-serverless-flask-prod-NotifyNewPhotosLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/prod"
                ]
              ]
            },
            "Export": {
              "Name": "sls-serverless-flask-prod-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "wsgi": {
        "app": "app.app",
        "packRequirements": false,
        "pythonBin": "python"
      },
      "pythonRequirements": {
        "dockerizePip": "non-linux",
        "slim": true
      },
      "dynamodb": {
        "start": {
          "migrate": true
        },
        "stages": [
          "test"
        ]
      },
      "defaultStage": "dev",
      "otherfile": {
        "environment": {
          "dev": {
            "registerPostsAndStoriesSchedule": "cron(0 0 1 * ? *)",
            "registerTweetsSchedule": "cron(10 11 * * ? *)",
            "executeForLoadingSchedule": "cron(10 11 * * ? *)",
            "notifyNewPhotosSchedule": "cron(10 11 * * ? *)",
            "X_API_KEY": "A9iJza3KmB51EnuZ9B9F16eyouu4SI7a66eYRkSt",
            "Other_File": "Development environment",
            "PLATFORM_APPLICATION_ARN": "arn:aws:sns:ap-northeast-1:880515148799:app/APNS_SANDBOX/marugoto-momoclo",
            "NOTIFICATIONS_TABLE_NAME": "Notifications-dev"
          },
          "prod": {
            "registerPostsAndStoriesSchedule": "cron(55 2,8,14 ? * * *)",
            "registerTweetsSchedule": "cron(20/30 23-15 ? * * *)",
            "registerYoutubeVideosSchedule": "rate(1 hour)",
            "notifyNewPhotosSchedule": "cron(0 3,9,15 ? * * *)",
            "notifyDailySchedule": "cron(0 22 ? * * *)",
            "executeForLoadingSchedule": "rate(5 minutes)",
            "X_API_KEY": "dxZgNirsUH288XujmlO1G14PT39FUtec8FrNGDhL",
            "Other_File": "Production environment",
            "PLATFORM_APPLICATION_ARN": "arn:aws:sns:ap-northeast-1:880515148799:app/APNS/marugotoda-Z-prod",
            "NOTIFICATIONS_TABLE_NAME": "Notifications"
          }
        }
      }
    },
    "plugins": [
      "serverless-python-requirements",
      "serverless-wsgi"
    ],
    "pluginsData": {},
    "functions": {
      "downloadImages": {
        "handler": "wsgi_handler.handler",
        "environment": {
          "Other_File": "Production environment"
        },
        "events": [
          {
            "http": {
              "method": "get",
              "path": "photos",
              "private": true,
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "schedule": "rate(5 minutes)"
          }
        ],
        "name": "serverless-flask-prod-downloadImages",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "DownloadImagesLambdaVersionV2s1TUyBcg2f3YNF2xw9zeyCpIOpzyAPdQuAbOhZRk"
      },
      "downloadImageUrls": {
        "handler": "wsgi_handler.handler",
        "environment": {
          "Other_File": "Production environment"
        },
        "events": [
          {
            "http": {
              "method": "get",
              "path": "photosUrl",
              "private": true,
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "schedule": "rate(5 minutes)"
          }
        ],
        "name": "serverless-flask-prod-downloadImageUrls",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "DownloadImageUrlsLambdaVersionZXlzUN38DiDlEkiAHzr86RuZdVWkdP0PIXQroVoc"
      },
      "downloadImageUrl": {
        "handler": "wsgi_handler.handler",
        "environment": {
          "Other_File": "Production environment"
        },
        "events": [
          {
            "http": {
              "method": "get",
              "path": "photosUrl/{id}",
              "private": true,
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "serverless-flask-prod-downloadImageUrl",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "DownloadImageUrlLambdaVersionNHF7rXVvNUpZjoTwijiQKKqAsKK82xFWZjbhV73xs"
      },
      "getNotificationSettings": {
        "handler": "wsgi_handler.handler",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "notifications",
              "private": true,
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "serverless-flask-prod-getNotificationSettings",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "GetNotificationSettingsLambdaVersionz99xjMUpJbyFA2fYd5ca5xOtz5rSe3nYCLrE6nk"
      },
      "postLineEvents": {
        "handler": "wsgi_handler.handler",
        "environment": {
          "Other_File": "Production environment"
        },
        "events": [
          {
            "http": {
              "method": "post",
              "path": "line/events",
              "private": false,
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "serverless-flask-prod-postLineEvents",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "PostLineEventsLambdaVersionpJFccgXhHvd0NYSEqzXtKGPEZt0WBLwr61GiWPPcYVs"
      },
      "registerPostsAndStories": {
        "handler": "batch/register_posts_and_stories.register_posts_and_stories",
        "timeout": 120,
        "events": [
          {
            "schedule": "cron(55 2,8,14 ? * * *)"
          }
        ],
        "name": "serverless-flask-prod-registerPostsAndStories",
        "package": {},
        "memory": 1024,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "RegisterPostsAndStoriesLambdaVersionFLeb7wCobSiu9o2M07AIIAhO2UdZWLbvHgcFhSxKj4"
      },
      "registerYoutubeVideos": {
        "handler": "batch/register_youtube_videos.register_youtube_videos",
        "timeout": 120,
        "events": [
          {
            "schedule": "rate(1 hour)"
          }
        ],
        "name": "serverless-flask-prod-registerYoutubeVideos",
        "package": {},
        "memory": 1024,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "RegisterYoutubeVideosLambdaVersionk53wnAXiPbyhKUSTtgZjRFxl6Ey5XVRO04zUdjQymk"
      },
      "notifyDailySchedule": {
        "handler": "batch/notify_daily_schedule.notify_daily_schedule",
        "timeout": 600,
        "events": [
          {
            "schedule": "cron(0 22 ? * * *)"
          }
        ],
        "name": "serverless-flask-prod-notifyDailySchedule",
        "package": {},
        "memory": 1024,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "NotifyDailyScheduleLambdaVersionmTulsxou8wdlKanhRF2lBivPAKwTTTQ5xp2ZHeAQw"
      },
      "registerTweets": {
        "handler": "batch/register_tweets.register_tweets",
        "timeout": 600,
        "events": [
          {
            "schedule": "cron(20/30 23-15 ? * * *)"
          }
        ],
        "name": "serverless-flask-prod-registerTweets",
        "package": {},
        "memory": 1024,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "RegisterTweetsLambdaVersionXLePPjtBOm2LEyGEEfTOfVuGOVnLJEBM7Hczk0BBEPs"
      },
      "notifyNewPhotos": {
        "handler": "batch/notify_new_photos.notify_new_photos",
        "timeout": 600,
        "events": [
          {
            "schedule": "cron(0 3,9,15 ? * * *)"
          }
        ],
        "name": "serverless-flask-prod-notifyNewPhotos",
        "package": {},
        "memory": 1024,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "NotifyNewPhotosLambdaVersion2dkxtQZeMF0Xm8EspxPZh2aIQ3os56M6xkENUcJcQ"
      },
      "executeForLoading": {
        "handler": "batch/execute_for_loading.execute_for_loading",
        "package": {
          "individually": true,
          "artifact": "/Users/hiroyuki/Documents/marugoto-momoclo-back/marugoto-momoclo-back/.serverless/executeForLoading.zip"
        },
        "timeout": 30,
        "events": [
          {
            "schedule": "rate(5 minutes)"
          }
        ],
        "name": "serverless-flask-prod-executeForLoading",
        "memory": 1024,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "ExecuteForLoadingLambdaVersion0bH8aHEaCcHw1jWFucP3xDKKuEWdR4tYRmSCi0PQFHo"
      }
    },
    "resources": {
      "Resources": {
        "GatewayResponseDefault4XX": {
          "Type": "AWS::ApiGateway::GatewayResponse",
          "Properties": {
            "ResponseParameters": {
              "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
              "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
            },
            "ResponseType": "DEFAULT_4XX",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "error",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "serverless-flask",
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "excludeDevDependencies": true,
        "exclude": [
          ".git/**",
          ".vscode/**",
          "node_modules/**",
          ".serverless/**",
          ".dynamodb/**",
          "__pycache__/**"
        ],
        "artifactsS3KeyDirname": "serverless/serverless-flask/prod/code-artifacts",
        "include": [
          "wsgi_handler.py",
          "serverless_wsgi.py",
          ".serverless-wsgi"
        ],
        "artifact": "/Users/hiroyuki/Documents/marugoto-momoclo-back/marugoto-momoclo-back/.serverless/serverless-flask.zip",
        "artifactDirectoryName": "serverless/serverless-flask/prod/1661046349626-2022-08-21T01:45:49.626Z"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "configValidationMode": "error"
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/hiroyuki/Documents/marugoto-momoclo-back/marugoto-momoclo-back/.serverless/serverless-flask.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/serverless-flask/prod/1661046349626-2022-08-21T01:45:49.626Z",
    "artifact": "serverless-flask.zip"
  }
}